módulo 1:introdução 


1-introdução 
-explicação sobre o php 

2-Ferramentas Necessárias
-linguagem = php 
-servidor = apache ou nginx 
-banco de dados = mysql 
-editor de código = vscode 

3-Editor de código (VSCode)
-ok 

4-Instalando o PHP 7.4 (XAMPP)
-ok 

5-Como funciona o PHP?
-utilizando o localhost ou 127.0.0.1 

6-primeiros comandos no php 
-executando servidor local do php com: php -S localhost:8080
-imprimindo informações concatenadas na tela 

7-tipos de variáveis 
-string, number, boolean, null, 

8-mesclando variáveis 
-concatenando variáveis 

9-arrays 
-serve para armazenar vários valores (e todo tipo de dado) em uma variável 
-pode se reutilizar depois o array como um todo ou então selecionar cada item por índice 

10-operador array spread 
-recurso apartir do php 7.4 
-array spread é a funcionalidade dos 3 pontos (...) mais o nome da variável que vc irá trazer para uma variável, reaproveitando os dados por inteiro de outra 

11-Exercício Prático (Variáveis)
-OK 


módulo 2:Condicionais e loops 


1-condicional if 
-"Se", então faça tal coisa 
-feito exemplo cássico de menor e maior de idade 

2-condicional ternário 
-ternário remete a algo divido em três partes, "terno" 
-o ternário é um IF de uma linha 

3-Condicional NULL CAO (7.4)
-é uma simplicação do Condicional ternário
-é o condicional que possibilita fazer direto em uma linha já em uma ação de atribuição ou também de concatenação. 
"$nomeCompleto concatena com $sobreNome caso ela esteja setada, se não, concatena com vazio"
ex: $nomeCompleto .= ($sobreNome) ?? '';

4-Condicional Switch
-sistema de condicional em loop que utiliza 'cases', de acordo com o dado que tiver dentro de case for o mesmo dentro do parâmetro da variavel em switch ele executa,
     e por ultimo pode usar um default 

5-Loop While
-while sistema de loop que executa determinado código, 'enquanto' determinada condição seja atendida 

6-Loop For
-sistema de loop mais seguro que, recebe 3 parâmetros, sendo eles, valor inicial, a condicional e o incremento ou decremento, não tem o risco de gerar um loop infinito igual no while 

7-loop foreach 
-tipo de loop que trabalha com arrays (para cada, para cada item de um array) 
-faz varredura em array 
-possibilita acessar a chave do indice também 

8-Exercício Prático 1
-ok 

9-Exercício Prático 2
ok 


módulo 3:Funções parâmetros e includes 


1-introdução a funções 
-funções são blocos de códigos que fazem algo em específico, um robozinho programada pra fazer uma ação específica 
-toda função recebe dados para posteriormente processá-lo de alguma forma 
-existem funções nativas do php e as que são criadas pelo programador
-pode ser reutilizada quantas vezes for necessária 

2-Definindo uma função
-a função precisa ser chamada para ser executada, não basta apenas defini-la 

3-Parâmetros: Definição normal
-parâmetros servem para definir quais dados serão utilizados pela função, como se fossem dados de entrada 
-parâmetros são variáveis que recebem dados para a realização da função

4-Parâmetros: Type e Valor padrão
-é possível tipar o dado do parâmetro, informando o tipo antes de passar a variável 
-se a função espera tantos parâmetros, e for passado mais ou menos, irá gerar um erro do sistema 

5-Parâmetros: Referência ou Valor
-passar parâmetro por valor é: quando chamar a função, em seu parâmetro pode incluir o próprio valor a ser usado, ou também variáveis que tem valor contigo em si 
-passar parâmetro por referência, no parametro da função um & antecede a variavel, neste caso, o dado não fica restrito somente ao interior da função 

6-Funções Anônimas
-função anônima é uma função sem nome que pode ser armazenada em uma variável ou em parâmetros
-função anônima, ela não tem nome, acaba sendo criado e já usada no código, porém não pode ser reutilizada. Por isso existem 2 maneiras corretas: 
     -armazenando ela dentro de uma variável, sendo assim, posteriormente a função pode ser chamada quando necessário 
     -passando como parâmentro para outra função 
-dentro de uma variável ela pode ser chamada de qualquer lugar 

7-funções flechas (Arrow) (7.4)
-são as arrow functions 
-arrow function é para quando há apenas um comando sendo executado 

8-Funções Recursivas
-muito pouco usada na prática 
-função recursiva é uma função que executa ela mesma internamente 

9-Funções Nativas de Matemática
-são funções já nativas usadas no PHP, usadas para expressões matemáticas 
-todas estão disponíveis na documentação 

10-Funções Nativas de String (1/2)
-funções de string geralmente começam com 'str'
-trim() = ajusta espaçamento de uma string 
-strlen() serve para capturar a quantidade de caracteres de uma string 
-strtoupper() converte todos os caracteres para maiúsculo 
-strtolower() converte todos os caracteres para minúsculo 

11-Funções Nativas de String (2/2)
-explode() = tem 2 parâmetros, serva para transformar cada palavra de uma string em um item de array 
-number_format() = serve para formatar números 

12-Funções Nativas de Array (1/2)
-count() - método que retorna a quantidade de itens de um array 
-array_diff($parametroBase, $dados a serem Retirados) 

13-Funções Nativas de Array (2/2)
-array_pop() - retira o último item do array 
-array_shift() - retira o primeiro item do array 
-in_array($dadoProcurado, $array) - serve para procurar algum item dentro de um array, se existir dentro do array, retorna true, se não, <i class="fas fa-less    "></i>

14-Funções Nativas de Data/Hora
-time() - tempo em milisegundos desde o inicio do php 
-date('d/m/Y H:m:s') - método que pega dia, mês, ano - hora, minuto e segundo 
-data sempre é salva no padrão internacional (ano, mês e dia)

15-Exercício Prático (Funções)
-ok 

16-Trabalhando com múltiplos arquivos
-require('endereco.php do arquivo requirido') - faz uma requisição dos dados do arquivo php que está sendo descrito no parâmetro 
     evita ter que ficar reescrevendo código, apenas 'requerendo' dados de determinado arquivo. quando da error, para todo o sistema
-include() - quando da error, avisa o erro, mas continua a execução do código 

17-Trabalhando com pastas diferentes
-fazendo require() de arquivos php que estão dentro de uma pasta 


módulo 4:Formulários, Validações, Sessão e Arquivos 


1-Introdução à HTTP Requests
- criado formulário, configurado method (get ou post) e a action que é o destino dos dados 
-get aparece na url os parâmetros enviados 
-post os dados vão pelo payload 

2-Pegando informações do formulário
-a 'action' do form é onde informamos o redirecionamento da url após a submissão dos dados 
-o método nativo filter_input(INPUT_GET ou INPUT_POST, 'name do dado') serve para capturar o dado submetido, podendo ser colocado dentro de uma variável 
-o méotodo nativo header("Location: paginaDestino.php) serve para fazer redirecionamento de URL, sempre após o header(), chamar o exit, para parar a execução 

3-Validando informações do formulário
-uso de métodos nativos para filtrar e/ou validar dados enviados no form: FILTER_VALIDATE_EMAIL(), FILTER_SANITIZE_NUMBER_INT() etc
-existem diversos méotodos nativos do PHP do tipo FILTER_VALIDATE E FILTER_SANITIZE 

4-Sessões no PHP 
-session é semelhante ao cookie, deixa alguma informação no sistema, porem, a session deixa a informação nos servidor(geralmente em sistema de login) 
usando $_SESSION['arquivo'] é possível criar mensagens de sessão 

5-Cookies no PHP
-cookies ficam salvos no navegador do usuário 
-o cookie precisa ser setado sempre antes da impressão de qualquer dado na tela 

6-Exercício Prático (Formulários)
-ok 

7-Lendo arquivos
-consumir dados de arquivos externos e internos, file_get_contents($variavelQueContemOdado)

8-Escrevendo em arquivos
-usado os métodos file_get_contents('nomeDoArquivo.txt') para inserir em uma variável o conteúdo do arquivo;
-usado os métodos put_get_contents('Novo conteúdoDoArquivo') para inserir o novo conteúdo no arquivo; 

9-Exercício Prático (Cadastro com txt)
-ok 

10-Excluindo arquivos
-método php para excluir arquivos, unlink('nomeDoArquivo')

11-Movendo arquivos
-méotodo php para renomear um arquivo, rename('nomeAntigo.txt', 'nomeNome.txt');
-méotodo php para renomear um arquivo, copy('pasta/nomeAntigo.txt', 'nomeNome.txt');

12-Upload de arquivos (1/2)
-ok 

13-Upload de arquivos (2/2)
-ok 


módulo 5:Manipulação de array 


1-array range 
-range(1, 5) = função que serve para gerar um array, primeiro parâmetro item que vai começar, o segundo é o item que vai terminar 

2-key_exists
-key_exists('nome', $array) = método que serve para verificar se determinada key de um array existe

3-array_keys e array_values
-array_keys() = serve para gerar um array de keys, a partir de um array original
-array_valores() = serve para gerar um array de values, a partir de um array original

4-Exercício: Montando uma tabela vertical
-usado o foreach pra inserir chave e valor organizado dentro de uma tabela 

5-Exercício: Montando uma tabela horizontal
-array principal foi separado em key e values usando seus respectivos métodos, em seguida 2 loop de foreach feito, o de key e o de value, inserido a tabela dinamicamente 

6-array_slice
-método que serve para fatiar o array, 'cortar' onde for necessário, ele não corta o array original e sim cria um novo array com o antigo fatiado 
ex: $array = ['a', 'b', 'c', 'd', 'e', 'f'];
    $retorno = array_slice($array, 0, 2); 

7-array_splice
-método que serve para remover itens de um array, neste caso não cria um novo array, recebe no parâmetro o próprio array, a posição de partida e a quantidade 
-no quarto parâmetro do método,ele possíbilita informar qual item irá entrar no array 

8-array_reduce 
-serve para reduzir todo array em um item apenas, 

9-Descontruindo usando list
-list() - este método serve para desconstruir um array, sendo assim, após saber o nome do array, nos parametros do método, cria-se variáveis que possibilitarão acessar cada índice do array 


módulo 6:Orientação á Objetos 


1-Introdução à Orientação à Objetos
-sistema feito por várias classes, as Classes são como fôrmas, que podem gerar quantos objetos (itens forem necessários, objetos que veem da mesma classe tem as mesmas caracteristicas)

2-Definindo Classes e Objetos
-classe = é a fôrma que serve para gerar objetos 
-objeto = item criado a partir de uma class, tendo caracteristicas e propriedades padrão, porem com valores diferentes 
-classes tem propriedades e métodos

3-Definindo Métodos e Propriedades
-propriedades ou atributos = características de um objeto criado por uma classe (classe pessoa, tem nome, idade, altura etc...)
     podem ser: públicas, privadas e protegidas (public, private, protected)

4-Typed Properties (7.4)
-são propriedades tipadas, ou seja, proteje a propriedade para que receba tipo de dados que forem especificados(string, int, boolean etc...) 

5-Método Construtor
-__construct() - o construtor é rodado sempre que um objeto é criado(derivado da class, que contém propriedades e métodos)
-possibilita criar valores para as propriedades dos objetos, já na sua criação pela classe 

6-Entendendo Encapsulamento
-serve para proteger de acessos indevidos ou desnecessários 

7-Método Estático
-método estático é o método que pode ser usado sem a necessidade de criação de uma class 
-a public static é criada dentro de uma class, porem ela pode ser chamada sem a criação de um objeto, ex: echo Matematica::somar(3, 7);
- o método estático é chamado usando '::' entre o nome da class e o nome do método da referida class 

8-Exercício Prático (OO)
-ok 

9-Entendendo Herança
-para usar a Herança, a class que for herdar propriedades e métodos de uma outra, quando for declarada, precida extender da referida class, usando o "extends"

10-Propriedade Private e Protected
-private = propriedades private só podem ser alteradas pelas class que a criaram 
-protected = podem ser acessadas também pelas class que herdam as classes que a criaram 

11-Entendendo Interface
-finalidade de padronização e organização 

12-Entendendo Polimorfismo
-ok 

13-Entendendo Namespace
-possibilita usar classes com o mesmo nome 
-a diferenciação é pelo namespace, dando o nome diferente no namespace\nomeDaClass, quando for instanciar a class, o new recebe o endereço todo 
-também pode ser usado o nome do 'alias' 

14-Entendendo Injeção de Dependência
-
